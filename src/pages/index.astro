---
import MainLayout from '../layouts/MainLayout.astro';
import { supabase } from '../lib/supabase';
import type { Profile } from '../lib/types';
import { getOptimizedImageUrl } from '../lib/utils'; // Import our new helper

const { url } = Astro;

const sortBy = url.searchParams.get('sort') || 'oldest';

const sortOptions = {
  column: 'created_at',
  ascending: sortBy === 'oldest',
};

const { data: profiles, error } = await supabase
  .from('profiles')
  .select('*')
  .order(sortOptions.column, { ascending: sortOptions.ascending });

if (error) { console.error("Error fetching profiles:", error.message); }

const professions = ['All', ...new Set(profiles?.map(p => p.profession).filter(Boolean) || [])];
---
<MainLayout title="DivineX - User Profiles">
  <header class="page-header">
    <h1>All Profiles</h1>
    <p>Discover other creatives in the community.</p>
  </header>

  <div class="filters">
    <input type="search" id="search-bar" placeholder="Search by name..." aria-label="Search by name" />
    <div class="sort-and-filter-group">
      <div class="profession-filters">
        {professions.map((profession, index) => (
          <button class:list={["filter-btn", { active: index === 0 }]} data-profession={profession}>
            {profession}
          </button>
        ))}
      </div>
      
      <div class="sort-controls">
        <a href="/?sort=oldest" class:list={["sort-btn", { active: sortBy === 'oldest' }]}>Oldest</a>
        <a href="/?sort=newest" class:list={["sort-btn", { active: sortBy === 'newest' }]}>Newest</a>
      </div>
    </div>
  </div>

  {profiles && profiles.length > 0 ? (
    <div class="profile-grid" id="profile-grid">
      {profiles.map(profile => (
        <a 
          href={`/profiles/${profile.id}`} 
          class="profile-card-link"
          data-name={(profile.username || '').toLowerCase()}
          data-profession={profile.profession || ''}
        >
          <div class="profile-card">
            <img 
              src={getOptimizedImageUrl(profile.profile_picture_url, 200, 200)} 
              alt={profile.username || 'User Avatar'} 
              class="profile-avatar"
              width="100"
              height="100"
              loading="lazy"
            />
            <h2 class="profile-username">{profile.username || 'Anonymous User'}</h2>
            {profile.profession && <p class="profile-profession">{profile.profession}</p>}
            <p class="profile-bio-truncated">{profile.bio || 'No bio provided.'}</p>
          </div>
        </a>
      ))}
    </div>
  ) : (
    <div class="empty-state">
      <h2>No Profiles Yet</h2>
      <p>Be the first to create a profile!</p>
    </div>
  )}
</MainLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchBar = document.getElementById('search-bar') as HTMLInputElement;
    const filterButtons = document.querySelectorAll('.filter-btn');
    const profileCardLinks = document.querySelectorAll('.profile-card-link') as NodeListOf<HTMLElement>;

    if (!searchBar || filterButtons.length === 0) return;
    
    let activeProfession = 'All';

    function filterProfiles() {
      const searchTerm = searchBar.value.toLowerCase().trim();
      profileCardLinks.forEach(cardLink => {
        const cardName = cardLink.dataset.name || '';
        const cardProfession = cardLink.dataset.profession || '';
        const nameMatch = cardName.includes(searchTerm);
        const professionMatch = activeProfession === 'All' || cardProfession === activeProfession;
        if (nameMatch && professionMatch) {
          cardLink.style.display = 'block';
        } else {
          cardLink.style.display = 'none';
        }
      });
    }

    searchBar.addEventListener('input', filterProfiles);
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        activeProfession = (button as HTMLElement).dataset.profession || 'All';
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        filterProfiles();
      });
    });
  });
</script>

<style>
  .page-header { text-align: center; margin-bottom: 2.5rem; }
  .page-header h1 { font-size: 2.5rem; margin: 0 0 0.5rem; }
  .page-header p { font-size: 1.1rem; color: var(--hint-color); margin: 0; }
  .filters { display: flex; flex-direction: column; gap: 1rem; margin-bottom: 2.5rem; }
  #search-bar { width: 100%; padding: 0.8rem 1.25rem; font-size: 1rem; border-radius: 12px; border: 1px solid var(--border-color); background-color: var(--secondary-bg-color); color: var(--text-color); }
  
  .sort-and-filter-group {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  .profession-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  .filter-btn { padding: 0.5rem 1rem; font-size: 0.9rem; font-weight: 500; border: none; border-radius: 8px; background-color: var(--secondary-bg-color); color: var(--text-color); cursor: pointer; transition: background-color 0.2s, color 0.2s; }
  .filter-btn.active { background-color: var(--brand-color); color: var(--button-text-color); }
  
  .sort-controls {
    display: flex;
    gap: 0.5rem;
    background-color: var(--secondary-bg-color);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.25rem;
  }
  .sort-btn {
    padding: 0.4rem 0.8rem;
    font-size: 0.85rem;
    font-weight: 600;
    border: none;
    border-radius: 6px;
    text-decoration: none;
    color: var(--hint-color);
    transition: all 0.2s;
  }
  .sort-btn.active {
    background-color: var(--bg-color);
    color: var(--text-color);
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .profile-grid { display: grid; grid-template-columns: 1fr; gap: 1.5rem; }
  @media (min-width: 640px) { .profile-grid { grid-template-columns: repeat(2, 1fr); } }
  @media (min-width: 1024px) { .profile-grid { grid-template-columns: repeat(3, 1fr); } }
  
  .profile-card-link {
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.2s ease-in-out;
  }
  .profile-card-link:hover { transform: translateY(-5px); }

  .profile-card { 
    background-color: var(--secondary-bg-color); border-radius: 20px;
    padding: 1.5rem; text-align: center; border: 1px solid var(--border-color);
    display: flex; flex-direction: column; height: 100%;
  }
  .profile-avatar {
    width: 100px; height: 100px; border-radius: 50%; object-fit: cover;
    margin: 0 auto 1rem; border: 2px solid var(--bg-color);
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
  }
  .profile-username { font-size: 1.25rem; font-weight: 600; margin: 0 0 0.5rem; }
  .profile-profession { font-size: 0.9rem; font-weight: 500; color: var(--brand-color); margin: -0.25rem 0 0.75rem; }
  .profile-bio-truncated { 
    font-size: 0.95rem; color: var(--hint-color); line-height: 1.5; margin: 0; 
    flex-grow: 1;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;  
    overflow: hidden;
  }
  .empty-state { text-align: center; padding: 3rem 1rem; }
</style>