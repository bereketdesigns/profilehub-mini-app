---
import MainLayout from '../../layouts/MainLayout.astro';
import type { Project } from '../../lib/types';
---
<MainLayout title="Manage Projects | DivineX">
  <div class="manage-projects-page">
    <div class="back-link-wrapper">
      <a href="/" class="back-link">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 12H5"></path><polyline points="12 19 5 12 12 5"></polyline></svg>
        <span>Back to Homepage</span>
      </a>
    </div>
    <header class="page-header">
      <h1>Manage Your Projects</h1>
      <p>Add, edit, or remove up to 4 portfolio projects.</p>
    </header>
    <div class="projects-container" id="projects-container">
      <p id="loading-message">Loading your projects...</p>
    </div>
    <div class="add-project-section">
      <button id="add-project-btn" class="add-project-btn">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
        <span>Add New Project</span>
      </button>
    </div>
  </div>

  <div id="project-modal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <h2 id="modal-title">Add New Project</h2>
      <form id="project-form">
        <input type="hidden" id="project-id" name="id" />
        <input type="hidden" id="project-image-url" name="image_url" />
        <label>Title <input type="text" id="project-title" name="title" required /></label>
        <label>Description <textarea id="project-description" name="description" rows="4"></textarea></label>
        <label>Image <input type="file" id="project-image-upload" accept="image/*" /></label>
        <div id="image-preview-container" class="image-preview-container" style="display: none;">
          <span>Current:</span>
          <img src="" id="image-preview" class="image-preview" alt="Current project image"/>
        </div>
        <div id="modal-status"></div>
        <div class="modal-actions">
          <button type="button" id="cancel-btn" class="btn-secondary">Cancel</button>
          <button type="submit" id="save-btn" class="btn-primary">Save Project</button>
        </div>
      </form>
    </div>
  </div>
</MainLayout>
<script>
import type { Project } from "../../lib/types";
document.addEventListener('DOMContentLoaded', () => {
    const projectsContainer = document.getElementById('projects-container') as HTMLElement;
    const loadingMessage = document.getElementById('loading-message') as HTMLParagraphElement;
    const addProjectBtn = document.getElementById('add-project-btn') as HTMLButtonElement;
    const modal = document.getElementById('project-modal') as HTMLElement;
    const modalTitle = document.getElementById('modal-title') as HTMLHeadingElement;
    const projectForm = document.getElementById('project-form') as HTMLFormElement;
    const cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
    const saveBtn = document.getElementById('save-btn') as HTMLButtonElement;
    const modalStatus = document.getElementById('modal-status') as HTMLDivElement;
    const projectIdInput = document.getElementById('project-id') as HTMLInputElement;
    const projectTitleInput = document.getElementById('project-title') as HTMLInputElement;
    const projectDescriptionInput = document.getElementById('project-description') as HTMLTextAreaElement;
    const projectImageUrlInput = document.getElementById('project-image-url') as HTMLInputElement;
    const projectImageUpload = document.getElementById('project-image-upload') as HTMLInputElement;
    const imagePreviewContainer = document.getElementById('image-preview-container') as HTMLElement;
    const imagePreview = document.getElementById('image-preview') as HTMLImageElement;
    let projects: Project[] = [];
    const tg = window.Telegram?.WebApp;
    if (!projectsContainer || !loadingMessage || !addProjectBtn || !modal || !modalTitle || !projectForm || !cancelBtn || !saveBtn || !modalStatus) {
        return;
    }
    function renderProjects() {
        projectsContainer.innerHTML = '';
        if (projects.length === 0) {
            loadingMessage.textContent = 'You have no projects yet. Click "Add New Project" to start.';
            projectsContainer.appendChild(loadingMessage);
        } else {
            projects.forEach(project => {
                const card = document.createElement('div');
                card.className = 'project-manage-card';
                card.innerHTML = `
                    <img class="project-card-image" src="${project.image_url}" alt="${project.title}" style="width: 80px; height: 80px; object-fit: cover; flex-shrink: 0;" />
                    <div class="info">
                        <h3>${project.title}</h3>
                        <p>${project.description || ''}</p>
                    </div>
                    <div class="actions">
                        <button class="edit-btn" data-id="${project.id}">Edit</button>
                        <button class="delete-btn" data-id="${project.id}">Delete</button>
                    </div>
                `;
                projectsContainer.appendChild(card);
            });
        }
        addProjectBtn.style.display = projects.length >= 4 ? 'none' : 'inline-flex';
    }
    async function fetchProjects() {
        if (!tg?.initData) return;
        try {
            const res = await fetch('/api/projects/get-all', {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ initData: tg.initData })
            });
            const data = await res.json();
            if (data.error) throw new Error(data.error);
            projects = data.projects;
            renderProjects();
        } catch (error) {
            loadingMessage.textContent = `Error: ${(error as Error).message}`;
        }
    }
    function openModal(project: Project | null = null) {
        projectForm.reset();
        modalStatus.textContent = '';
        imagePreviewContainer.style.display = 'none';
        if (project) {
            modalTitle.textContent = 'Edit Project';
            projectIdInput.value = project.id.toString();
            projectTitleInput.value = project.title;
            projectDescriptionInput.value = project.description || '';
            projectImageUrlInput.value = project.image_url || '';
            imagePreview.src = project.image_url || '';
            imagePreviewContainer.style.display = 'flex';
            projectImageUpload.required = false;
        } else {
            modalTitle.textContent = 'Add New Project';
            projectIdInput.value = '';
            projectImageUpload.required = true;
        }
        modal.style.display = 'flex';
    }
    function closeModal() {
        modal.style.display = 'none';
    }
    addProjectBtn.addEventListener('click', () => openModal());
    cancelBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', (e: MouseEvent) => {
        if (e.target === modal) closeModal();
    });
    projectForm.addEventListener('submit', async (e: SubmitEvent) => {
        e.preventDefault();
        saveBtn.disabled = true;
        modalStatus.textContent = 'Saving...';
        const formData = new FormData(projectForm);
        const id = formData.get('id');
        const newImageFile = projectImageUpload.files?.[0];
        let imageUrl = formData.get('image_url');
        try {
            if (newImageFile) {
                modalStatus.textContent = 'Uploading image...';
                const res = await fetch('/api/projects/upload', { method: 'POST', body: newImageFile });
                if (!res.ok) throw new Error('Image upload failed');
                const { url } = await res.json();
                imageUrl = url;
            }
            const projectData = {
                id,
                title: formData.get('title'),
                description: formData.get('description'),
                image_url: imageUrl,
                initData: tg.initData
            };
            const endpoint = id ? '/api/projects/update' : '/api/projects/create';
            const res = await fetch(endpoint, {
                method: 'POST', headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(projectData)
            });
            if (!res.ok) {
                const data = await res.json();
                throw new Error(data.error || 'Failed to save project.');
            }
            await fetchProjects();
            closeModal();
        } catch (error) {
            modalStatus.textContent = `Error: ${(error as Error).message}`;
        } finally {
            saveBtn.disabled = false;
        }
    });
    projectsContainer.addEventListener('click', async (e: MouseEvent) => {
        const target = e.target as HTMLElement;
        if (target.classList.contains('edit-btn')) {
            const id = target.dataset.id;
            const project = projects.find(p => p.id.toString() == id);
            if (project) openModal(project);
        }
        if (target.classList.contains('delete-btn')) {
            const id = target.dataset.id;
            if (confirm('Are you sure you want to delete this project?')) {
                try {
                    await fetch('/api/projects/delete', {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ initData: tg?.initData, id })
                    });
                    await fetchProjects();
                } catch (error) {
                    alert(`Error: ${(error as Error).message}`);
                }
            }
        }
    });
    if (tg) {
        fetchProjects();
    } else {
        loadingMessage.textContent = "Please open this page inside Telegram.";
    }
});
</script>
<style>
.manage-projects-page { max-width: 800px; margin: 0 auto; }
.back-link-wrapper { margin-bottom: 2rem; }
.back-link { display: inline-flex; align-items: center; gap: 0.5rem; font-weight: 500; color: var(--hint-color); text-decoration: none; transition: color 0.2s; }
.back-link:hover { color: var(--link-color); }
.page-header { text-align: center; margin-bottom: 3rem; }
.page-header h1 { font-size: 2.5rem; margin: 0; }
.page-header p { color: var(--hint-color); }
.projects-container { background-color: var(--secondary-bg-color); border: 1px solid var(--border-color); border-radius: 16px; padding: 2rem; min-height: 200px; }
#loading-message { color: var(--hint-color); text-align: center; }
.add-project-section { display: flex; justify-content: center; margin-top: 2rem; }
.add-project-btn { display: inline-flex; align-items: center; gap: 0.75rem; background-color: var(--accent-color); color: var(--button-text-color); padding: 0.8rem 1.5rem; border-radius: 8px; font-weight: 600; text-decoration: none; border: none; cursor: pointer; font-size: 1rem; transition: transform 0.2s; }
.add-project-btn:hover { transform: scale(1.05); }

/* --- THIS IS THE DEFINITIVE FIX --- */
.project-manage-card {
  display: grid; /* USE GRID */
  grid-template-columns: 80px 1fr auto; /* DEFINE STRICT COLUMNS */
  align-items: center;
  gap: 1.5rem;
  padding: 1rem 0;
  border-bottom: 1px solid var(--border-color);
}
.project-manage-card:last-child {
  border-bottom: none;
}

.project-card-image {
  width: 80px;  /* or 100% to fill the grid cell */
  height: 80px;
  border-radius: 8px;
  object-fit: cover;
  /* flex-shrink is no longer needed */
}
/* --- END OF FIX --- */

.project-manage-card .info { flex-grow: 1; }
.project-manage-card h3 { margin: 0 0 0.25rem; }
.project-manage-card p { margin: 0; color: var(--hint-color); font-size: 0.9em; overflow-wrap: break-word; } /* Added overflow-wrap for long text */
.project-manage-card .actions { display: flex; } /* Ensure buttons are in a row */
.project-manage-card .actions button { margin-left: 0.5rem; }
.modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 1001; }
.modal-content { background: var(--bg-color); padding: 2rem; border-radius: 16px; width: 90%; max-width: 500px; }
.modal-content h2 { margin-top: 0; }
.modal-content form { display: flex; flex-direction: column; gap: 1rem; }
.modal-content label { font-weight: 500; }
.modal-content input, .modal-content textarea { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--secondary-bg-color); color: var(--text-color); }
.image-preview-container { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); background-color: var(--secondary-bg-color); padding: 0.75rem; border-radius: 8px; }
.image-preview { width: 50px; height: 50px; border-radius: 4px; object-fit: cover; }
.modal-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1.5rem; }
.btn-primary, .btn-secondary { padding: 0.7rem 1.2rem; border-radius: 8px; border: none; font-weight: 600; cursor: pointer; }
.btn-primary { background-color: var(--accent-color); color: var(--button-text-color); }
.btn-secondary { background-color: var(--border-color); color: var(--text-color); }
</style>