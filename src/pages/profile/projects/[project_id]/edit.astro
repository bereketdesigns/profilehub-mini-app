---
import MainLayout from '../../../../layouts/MainLayout.astro';
import { supabase } from '../../../../lib/supabase';

const { project_id } = Astro.params;

const { data: project, error } = await supabase
  .from('projects')
  .select('*')
  .eq('id', project_id)
  .single();

if (error || !project) {
  return new Response(null, { status: 404, statusText: 'Project Not Found' });
}
---
<MainLayout title={`Edit ${project.title} - DivineX`}>
  <div class="profile-page">
    <div class="back-link-wrapper">
      <a href="/profile/edit" class="back-link">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 12H5"></path><polyline points="12 19 5 12 12 5"></polyline></svg>
        <span>Back to Edit Profile</span>
      </a>
    </div>

    <h1>Edit Project</h1>
    <form id="edit-project-form" class="profile-form">
      <input type="hidden" name="project_id" value={project.id} />
      <input type="hidden" name="image_url" id="image_url" value={project.image_url} />

      <label>Project Title <input type="text" name="title" value={project.title} required /></label>
      <label>Project Description <textarea name="description" rows="4">{project.description}</textarea></label>
      
      <label>Replace Project Image (Optional) <input type="file" name="image" accept="image/*" /></label>
      <div class="image-preview-wrapper">
        <span>Current:</span>
        <img src={project.image_url} alt="Current project image" class="image-preview" />
      </div>
      
      <div class="form-actions">
        <button type="submit" id="submit-btn" class="btn btn-primary">Save Changes</button>
      </div>
      <div id="form-status"></div>
    </form>
  </div>
</MainLayout>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram?.WebApp;
    if (!tg?.initData) {
      document.body.innerHTML = '<h1>Error: Must be accessed from within Telegram.</h1>';
      return;
    }
    tg.ready();

    const editProjectForm = document.getElementById('edit-project-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const formStatus = document.getElementById('form-status') as HTMLDivElement;

    async function uploadFile(file: File): Promise<string> {
      const response = await fetch('/api/profiles/upload', {
        method: 'POST', body: file, headers: { 'Content-Type': file.type, 'X-Bucket': 'project-images' }
      });
      if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || 'Upload failed.');
      }
      return (await response.json()).url;
    }

    editProjectForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      submitBtn.disabled = true;
      formStatus.textContent = 'Processing...';

      const form = e.target as HTMLFormElement;
      const newImageFile = (form.elements.namedItem('image') as HTMLInputElement).files?.[0];
      let imageUrl = (form.elements.namedItem('image_url') as HTMLInputElement).value;

      try {
        if (newImageFile) {
          formStatus.textContent = 'Uploading new image...';
          imageUrl = await uploadFile(newImageFile);
        }
        
        formStatus.textContent = 'Saving project...';
        
        const projectData = {
          initData: tg.initData,
          project_id: (form.elements.namedItem('project_id') as HTMLInputElement).value,
          title: (form.elements.namedItem('title') as HTMLInputElement).value,
          description: (form.elements.namedItem('description') as HTMLTextAreaElement).value,
          image_url: imageUrl,
        };

        const response = await fetch('/api/projects/update', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(projectData),
        });

        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || 'Failed to update project.');
        }

        alert('Project updated successfully!');
        window.location.href = '/profile/edit'; // Redirect back
      } catch (err) {
        alert(`Error: ${(err as Error).message}`);
        submitBtn.disabled = false;
        formStatus.textContent = '';
      }
    });
  });
</script>
<style>
  .profile-page { max-width: 600px; margin: 0 auto; }
  .back-link-wrapper { margin-bottom: 2rem; }
  .back-link { display: inline-flex; align-items: center; gap: 0.5rem; font-weight: 500; color: var(--hint-color); text-decoration: none; transition: color 0.2s; }
  .back-link:hover { color: var(--link-color); }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 1rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .image-preview-wrapper { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); }
  .image-preview { height: 50px; width: 50px; border-radius: 8px; object-fit: cover; }
  .form-actions { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 1rem; }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--accent-color); color: var(--button-text-color); }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: right; flex-grow: 1; }
</style>