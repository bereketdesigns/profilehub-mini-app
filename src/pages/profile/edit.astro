---
import MainLayout from '../layouts/MainLayout.astro';
// No server-side logic needed, everything is handled on the client.
---
<MainLayout title="Edit Your Profile - ProfileHub">
  <div class="profile-page">
    <h1>Edit Your Profile</h1>
    <p id="page-subtitle">Loading your data...</p>

    <form id="profile-form" class="profile-form" style="display: none;">
      <label>Username <input type="text" name="username" id="username" required /></label>
      <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
      <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
      
      <!-- Image re-upload functionality is a future step -->
      <p class="image-update-notice">To update your profile picture, please create a new profile for now.</p>
      
      <div class="form-actions">
        <a href="/" class="btn btn-secondary">Cancel</a>
        <button type="submit" id="submit-btn" class="btn btn-primary">Save Changes</button>
      </div>
      <div id="form-status"></div>
    </form>
  </div>
</MainLayout>

<script>
  const profileForm = document.getElementById('profile-form') as HTMLFormElement | null;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement | null;
  const formStatus = document.getElementById('form-status') as HTMLDivElement | null;
  const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement | null;

  // Form input elements
  const usernameInput = document.getElementById('username') as HTMLInputElement | null;
  const bioInput = document.getElementById('bio') as HTMLTextAreaElement | null;
  const contactLinkInput = document.getElementById('contact_link') as HTMLInputElement | null;

  document.addEventListener('DOMContentLoaded', () => {
    if (!window.Telegram || !window.Telegram.WebApp || window.Telegram.WebApp.initData === '') {
      if(pageSubtitle) pageSubtitle.textContent = "This page can only be accessed from within Telegram.";
      return;
    }

    const tg = window.Telegram.WebApp;

    // 1. Fetch the user's current profile data
    async function fetchProfileData() {
      if (!usernameInput || !bioInput || !contactLinkInput || !profileForm || !pageSubtitle) return;
      
      try {
        const response = await fetch('/api/profiles/me', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });

        if (!response.ok) {
          throw new Error('Could not fetch your profile. You may need to create one first.');
        }

        const data = await response.json();
        
        // 2. Populate the form with the fetched data
        // !!! BUG FIX 1: Add fallbacks to prevent "undefined" or "null" strings !!!
        usernameInput.value = data.profile.username || '';
        bioInput.value = data.profile.bio || '';
        contactLinkInput.value = data.profile.contact_link || '';

        profileForm.style.display = 'flex';
        pageSubtitle.textContent = 'Update your public information.';

      } catch (err) {
        const error = err as Error;
        pageSubtitle.textContent = `Error: ${error.message}`;
        alert(`Error: ${error.message}`);
      }
    }

    fetchProfileData();

    // 3. Handle form submission to update the profile
    profileForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (!submitBtn || !formStatus) return;

      submitBtn.disabled = true;
      formStatus.textContent = 'Saving changes...';

      const formData = new FormData(profileForm);
      const updatedData = {
        username: formData.get('username'),
        bio: formData.get('bio'),
        // !!! BUG FIX 2: Correctly read the contact_link from the form !!!
        contact_link: formData.get('contact_link'),
        initData: tg.initData,
      };

      try {
        const response = await fetch('/api/profiles/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });

        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error);
        }

        alert('Profile updated successfully!');
        tg.close();

      } catch (err) {
        const error = err as Error;
        alert(`Failed to save changes: ${error.message}`);
        submitBtn.disabled = false;
        formStatus.textContent = 'Failed. Please try again.';
      }
    });
  });
</script>
<style>
  .profile-page { max-width: 600px; margin: 0 auto; }
  .profile-page h1 { font-size: 2rem; }
  #page-subtitle { color: var(--hint-color); }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 2rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea {
    width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px;
    border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color);
  }
  .image-update-notice { font-size: 0.9em; color: var(--hint-color); background-color: var(--bg-color); padding: 0.75rem; border-radius: 8px; }
  .form-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1rem; }
  .btn {
    padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem;
    font-weight: 600; cursor: pointer; text-decoration: none;
  }
  .btn-primary { background-color: var(--tg-theme-button-color, #007aff); color: var(--tg-theme-button-text-color, #fff); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--tg-theme-text-color, #000); border: 1px solid var(--border-color); }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; margin-top: 0.5rem; min-height: 1.2em; }
</style>