---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - DivineX">
  <div class="profile-page">
    <!-- Part 1: Edit Profile Details -->
    <section class="form-section">
      <h1>Edit Your Profile</h1>
      <p id="page-subtitle">Initializing...</p>
      <form id="profile-form" class="profile-form" style="display: none;">
        <input type="hidden" id="profile-picture-url" name="profile_picture_url" />
        <label>Username <input type="text" name="username" id="username" required /></label>
        <label>Profession
          <select name="profession" id="profession" required>
            <option value="Brand Designer">Brand Designer</option>
            <option value="UI/UX Designer">UI/UX Designer</option>
            <option value="Developer">Developer</option>
            <option value="Product Manager">Product Manager</option>
            <option value="Illustrator">Illustrator</option>
            <option value="Photographer">Photographer</option>
          </select>
        </label>
        <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
        <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
        <label>Replace Profile Picture (Optional) <input type="file" id="avatar-upload" accept="image/*" /></label>
        <div class="image-preview-wrapper">
          <span>Current:</span>
          <img src="" alt="Current profile picture" id="image-preview" class="image-preview" />
        </div>
        <div class="form-actions">
          <button type="submit" id="submit-profile-btn" class="btn btn-primary">Save Profile Changes</button>
        </div>
        <div id="profile-form-status"></div>
      </form>
    </section>
    
    <!-- Part 2: Manage Projects -->
    <section class="form-section" id="projects-section" style="display: none;">
      <div class="section-header">
        <h2>Manage Projects</h2>
        <a href="/profile/projects/new" class="btn btn-primary" id="add-project-link" style="display: none;">+ Add Project</a>
      </div>
      <div id="project-list" class="project-list">
        <!-- JS will render project cards here -->
      </div>
    </section>
  </div>
</MainLayout>
<script>
  type Project = { id: number; title: string; image_url: string; };
  type ProfileWithProjects = { 
    id: number; username: string; bio: string; contact_link: string;
    profession: string; profile_picture_url: string; projects: Project[]; 
  };
  
  document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram?.WebApp;
    const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
    if (!tg?.initData) {
      if (pageSubtitle) pageSubtitle.textContent = "This page must be accessed from within Telegram.";
      return;
    }
    tg.ready();

    // --- Element Selectors ---
    const profileForm = document.getElementById('profile-form') as HTMLFormElement;
    const submitProfileBtn = document.getElementById('submit-profile-btn') as HTMLButtonElement;
    const profileFormStatus = document.getElementById('profile-form-status') as HTMLDivElement;
    const projectsSection = document.getElementById('projects-section') as HTMLElement;
    const projectList = document.getElementById('project-list') as HTMLDivElement;
    const addProjectLink = document.getElementById('add-project-link') as HTMLAnchorElement;

    async function uploadFile(file: File, bucket: 'profile-pictures' | 'project-images'): Promise<string> {
      // Logic for this is unchanged and correct
    }

    // --- Fetch and Render Logic ---
    async function fetchAndRender() {
      if (pageSubtitle) pageSubtitle.textContent = "Loading your data...";
      try {
        const response = await fetch('/api/profiles/me', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) throw new Error('Could not fetch your profile.');
        const data = await response.json();
        const userProfile: ProfileWithProjects | null = data?.profile;
        if (!userProfile) throw new Error('Invalid data received.');

        // Populate Profile Form
        (document.getElementById('username') as HTMLInputElement).value = userProfile.username || '';
        (document.getElementById('bio') as HTMLTextAreaElement).value = userProfile.bio || '';
        (document.getElementById('contact_link') as HTMLInputElement).value = userProfile.contact_link || '';
        (document.getElementById('profession') as HTMLSelectElement).value = userProfile.profession || '';
        (document.getElementById('profile-picture-url') as HTMLInputElement).value = userProfile.profile_picture_url || '';
        (document.getElementById('image-preview') as HTMLImageElement).src = userProfile.profile_picture_url || '/default-avatar.png';
        
        // Render Projects
        projectList.innerHTML = '';
        const projects = userProfile.projects || [];
        if (projects.length === 0) {
          projectList.innerHTML = '<p class="hint-text">You have no projects yet. Click "+ Add Project" to start.</p>';
        } else {
          projects.forEach((p: Project) => {
            const projectLink = document.createElement('a');
            projectLink.className = 'project-item-link';
            projectLink.href = `/profile/projects/${p.id}/edit`;
            projectLink.innerHTML = `
              <div class="project-item">
                <img src="${p.image_url}" alt="${p.title}" class="project-item-image" />
                <div class="project-item-info">
                  <h3 class="project-item-title">${p.title}</h3>
                </div>
              </div>
            `;
            projectList.appendChild(projectLink);
          });
        }
        
        // Show/Hide Add Project button based on project count
        addProjectLink.style.display = projects.length < 4 ? 'inline-flex' : 'none';

        // Show all sections now that data is loaded
        profileForm.style.display = 'flex';
        projectsSection.style.display = 'block';
        if (pageSubtitle) pageSubtitle.textContent = 'Update your public information.';
      } catch (err) {
        if (pageSubtitle) pageSubtitle.textContent = `Error: ${(err as Error).message}`;
      }
    }

    // --- Profile Form Submission Logic ---
    profileForm.addEventListener('submit', async (e: Event) => {
      e.preventDefault();
      if (!submitProfileBtn || !profileFormStatus) return;
      submitProfileBtn.disabled = true;
      profileFormStatus.textContent = 'Saving...';
      try {
        const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
        const newImageFile = avatarUpload.files?.[0];
        const profilePictureUrlInput = document.getElementById('profile-picture-url') as HTMLInputElement;
        let imageUrl = profilePictureUrlInput.value;
        if (newImageFile) {
          profileFormStatus.textContent = 'Uploading picture...';
          imageUrl = await uploadFile(newImageFile, 'profile-pictures');
        }

        const updatedData = {
          username: (document.getElementById('username') as HTMLInputElement).value,
          bio: (document.getElementById('bio') as HTMLTextAreaElement).value,
          contact_link: (document.getElementById('contact_link') as HTMLInputElement).value,
          profession: (document.getElementById('profession') as HTMLSelectElement).value,
          profile_picture_url: imageUrl,
          initData: tg.initData,
        };

        const response = await fetch('/api/profiles/update', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
        if (!response.ok) throw new Error('Failed to save profile changes.');
        alert('Profile updated successfully!');
        // No need to close, user might want to manage projects
      } catch (err) {
        alert(`Error: ${(err as Error).message}`);
      } finally {
        submitProfileBtn.disabled = false;
        profileFormStatus.textContent = '';
      }
    });

    fetchAndRender(); // Initial call to load everything
  });
</script>
<style>
  .profile-page { display: flex; flex-direction: column; gap: 3rem; }
  .form-section { border-top: 1px solid var(--border-color); padding-top: 2rem; }
  .form-section:first-child { border-top: none; padding-top: 0; }
  .section-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; }
  .section-header h2 { margin: 0; }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 1rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .image-preview-wrapper { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); }
  .image-preview { height: 50px; width: 50px; border-radius: 8px; object-fit: cover; }
  .form-actions { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 1rem; }
  .btn { display: inline-flex; align-items: center; padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--accent-color); color: var(--button-text-color); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--text-color); border: 1px solid var(--border-color); }
  #profile-form-status { font-size: 0.9rem; color: var(--hint-color); text-align: right; flex-grow: 1; }
  .hint-text { color: var(--hint-color); text-align: center; font-style: italic; padding: 1rem; }

  .project-list { display: grid; grid-template-columns: 1fr; gap: 1.5rem; }
  @media (min-width: 600px) { .project-list { grid-template-columns: repeat(2, 1fr); } }
  .project-item-link { text-decoration: none; color: inherit; display: block; transition: transform 0.2s; }
  .project-item-link:hover { transform: translateY(-4px); }
  .project-item { background-color: var(--bg-color); border-radius: 16px; border: 1px solid var(--border-color); overflow: hidden; }
  .project-item-image { width: 100%; height: 180px; object-fit: cover; }
  .project-item-info { padding: 1rem; }
  .project-item-title { font-size: 1.1rem; font-weight: 600; margin: 0; }
</style>