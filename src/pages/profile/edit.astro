---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - DivineX">
  <div class="profile-page">
    <section class="form-section">
      <h1>Edit Your Profile</h1>
      <p id="page-subtitle">Initializing...</p>
      <form id="profile-form" class="profile-form" style="display: none;">
        <input type="hidden" id="profile-id" />
        <input type="hidden" id="profile-picture-url" name="profile_picture_url" />
        <label>Username <input type="text" name="username" id="username" required /></label>
        <label>Profession
          <select name="profession" id="profession" required>
            <option value="Brand Designer">Brand Designer</option>
            <option value="UI/UX Designer">UI/UX Designer</option>
            <option value="Developer">Developer</option>
            <option value="Product Manager">Product Manager</option>
            <option value="Illustrator">Illustrator</option>
            <option value="Photographer">Photographer</option>
          </select>
        </label>
        <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
        <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
        <label>Replace Profile Picture (Optional) <input type="file" id="avatar-upload" accept="image/*" /></label>
        <div class="image-preview-wrapper">
          <span>Current:</span>
          <img src="" alt="Current profile picture" id="image-preview" class="image-preview" />
        </div>
        <div class="form-actions">
          <button type="submit" id="submit-profile-btn" class="btn btn-primary">Save Profile Changes</button>
        </div>
        <div id="profile-form-status"></div>
      </form>
    </section>
    <section class="form-section" id="projects-section" style="display: none;">
      <h2>Manage Your Projects</h2>
      <div id="project-list" class="project-list"></div>
      <div id="add-project-container">
        <h3>Add New Project</h3>
        <form id="add-project-form" class="profile-form">
          <label>Project Title <input type="text" name="title" required /></label>
          <label>Project Description <textarea name="description" rows="3"></textarea></label>
          <label>Project Image <input type="file" name="image" accept="image/*" required /></label>
          <div class="form-actions">
            <button type="submit" id="add-project-btn" class="btn btn-primary">Add Project</button>
          </div>
          <div id="project-form-status"></div>
        </form>
      </div>
    </section>
  </div>
</MainLayout>
<script>
  type Project = { id: number; title: string; image_url: string; };
  type ProfileWithProjects = { 
    id: number; username: string; bio: string; contact_link: string;
    profession: string; profile_picture_url: string; projects: Project[]; 
  };
  
  document.addEventListener('DOMContentLoaded', () => {
    let userProfile: ProfileWithProjects | null = null;
    const tg = window.Telegram?.WebApp;
    const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
    if (!tg?.initData) {
      if (pageSubtitle) pageSubtitle.textContent = "This page must be accessed from within Telegram.";
      return;
    }
    tg.ready();

    const profileForm = document.getElementById('profile-form') as HTMLFormElement;
    const submitProfileBtn = document.getElementById('submit-profile-btn') as HTMLButtonElement;
    const profileFormStatus = document.getElementById('profile-form-status') as HTMLDivElement;
    const projectsSection = document.getElementById('projects-section') as HTMLElement;
    const projectList = document.getElementById('project-list') as HTMLDivElement;
    const addProjectForm = document.getElementById('add-project-form') as HTMLFormElement;
    const addProjectContainer = document.getElementById('add-project-container') as HTMLElement;
    const addProjectBtn = document.getElementById('add-project-btn') as HTMLButtonElement;
    const projectFormStatus = document.getElementById('project-form-status') as HTMLDivElement;

    async function uploadFile(file: File, bucket: 'profile-pictures' | 'project-images'): Promise<string> {
      const response = await fetch('/api/profiles/upload', {
        method: 'POST', body: file, headers: { 'Content-Type': file.type, 'X-Bucket': bucket }
      });
      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Upload failed');
      }
      return (await response.json()).url;
    }

    function renderProjects() {
      if (!projectList || !addProjectContainer) return;
      projectList.innerHTML = '';
      const projects = userProfile?.projects;

      if (!projects || projects.length === 0) {
        projectList.innerHTML = '<p class="hint-text">You have no projects yet. Add one below!</p>';
      } else {
        projects.forEach((p: Project) => {
          const projectEl = document.createElement('div');
          projectEl.className = 'project-item';
          
          // !!! THE FIX: Create the new HTML structure for the image !!!
          projectEl.innerHTML = `
            <div class="project-image-container">
              <img src="${p.image_url}" alt="${p.title}" class="project-item-image" />
            </div>
            <div class="project-item-info">
              <p class="project-item-title">${p.title}</p>
            </div>
            <div class="project-item-actions">
              <button class="btn-delete" data-id="${p.id}">Delete</button>
            </div>
          `;
          projectList.appendChild(projectEl);
        });
      }
      
      if (projects && projects.length >= 4) {
        addProjectContainer.style.display = 'none';
        const limitReached = document.createElement('p');
        limitReached.className = 'hint-text';
        limitReached.textContent = 'You have reached the 4 project limit.';
        projectList.appendChild(limitReached);
      } else {
        addProjectContainer.style.display = 'block';
      }
    }

    async function fetchProfileData() {
      if (pageSubtitle) pageSubtitle.textContent = "Loading your data...";
      try {
        const response = await fetch('/api/profiles/me', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) throw new Error('Could not fetch your profile.');
        const data = await response.json();
        if (!data?.profile) throw new Error('Invalid data received.');
        
        userProfile = data.profile;
        
        if (userProfile && !userProfile.projects) {
            userProfile.projects = [];
        }
        if (!userProfile) { throw new Error('Profile data is missing after fetch.'); }

        (document.getElementById('profile-id') as HTMLInputElement).value = userProfile.id.toString();
        (document.getElementById('username') as HTMLInputElement).value = userProfile.username || '';
        (document.getElementById('bio') as HTMLTextAreaElement).value = userProfile.bio || '';
        (document.getElementById('contact_link') as HTMLInputElement).value = userProfile.contact_link || '';
        (document.getElementById('profession') as HTMLSelectElement).value = userProfile.profession || '';
        (document.getElementById('profile-picture-url') as HTMLInputElement).value = userProfile.profile_picture_url || '';
        (document.getElementById('image-preview') as HTMLImageElement).src = userProfile.profile_picture_url || '/default-avatar.png';
        
        if (profileForm) profileForm.style.display = 'flex';
        if (projectsSection) projectsSection.style.display = 'block';
        if (pageSubtitle) pageSubtitle.textContent = 'Update your public information.';
        
        renderProjects();
      } catch (err) {
        if (pageSubtitle) pageSubtitle.textContent = `Error: ${(err as Error).message}`;
      }
    }

    if (profileForm) profileForm.addEventListener('submit', async (e: Event) => {
      e.preventDefault();
      if (!submitProfileBtn || !profileFormStatus) return;
      submitProfileBtn.disabled = true;
      profileFormStatus.textContent = 'Saving...';
      try {
        const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
        const newImageFile = avatarUpload.files?.[0];
        const profilePictureUrlInput = document.getElementById('profile-picture-url') as HTMLInputElement;
        let imageUrl = profilePictureUrlInput.value;
        if (newImageFile) {
          profileFormStatus.textContent = 'Uploading picture...';
          imageUrl = await uploadFile(newImageFile, 'profile-pictures');
        }

        const updatedData = {
          username: (document.getElementById('username') as HTMLInputElement).value,
          bio: (document.getElementById('bio') as HTMLTextAreaElement).value,
          contact_link: (document.getElementById('contact_link') as HTMLInputElement).value,
          profession: (document.getElementById('profession') as HTMLSelectElement).value,
          profile_picture_url: imageUrl,
          initData: tg.initData,
        };

        const response = await fetch('/api/profiles/update', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
        if (!response.ok) throw new Error('Failed to save profile changes.');
        alert('Profile updated successfully!');
        tg.close();
      } catch (err) {
        alert(`Error: ${(err as Error).message}`);
        submitProfileBtn.disabled = false;
        profileFormStatus.textContent = '';
      }
    });

    if (addProjectForm) addProjectForm.addEventListener('submit', async (e: Event) => {
      e.preventDefault();
      if (!addProjectBtn || !projectFormStatus) return;

      addProjectBtn.disabled = true;
      projectFormStatus.textContent = 'Uploading project image...';
      const form = e.target as HTMLFormElement;
      const title = (form.elements.namedItem('title') as HTMLInputElement).value;
      const description = (form.elements.namedItem('description') as HTMLTextAreaElement).value;
      const imageFile = (form.elements.namedItem('image') as HTMLInputElement).files?.[0];

      if (!imageFile || !userProfile) return;

      try {
        const imageUrl = await uploadFile(imageFile, 'project-images');
        projectFormStatus.textContent = 'Adding project...';

        const response = await fetch('/api/projects/create', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            initData: tg.initData, profile_id: userProfile.id,
            title, description, image_url: imageUrl,
          }),
        });
        if (!response.ok) throw new Error('Failed to add project.');
        
        const newProject = await response.json();
        userProfile.projects.push(newProject);
        renderProjects();
        form.reset();
      } catch (err) {
        alert(`Error: ${(err as Error).message}`);
      } finally {
        addProjectBtn.disabled = false;
        projectFormStatus.textContent = '';
      }
    });

    if (projectList) projectList.addEventListener('click', async (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains('btn-delete')) {
        const projectId = target.dataset.id;
        if (confirm('Are you sure you want to delete this project?')) {
          (target as HTMLButtonElement).disabled = true;
          try {
            const response = await fetch('/api/projects/delete', {
              method: 'DELETE', headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ initData: tg.initData, project_id: projectId }),
            });
            if (!response.ok) throw new Error('Failed to delete project.');
            
            if (userProfile && userProfile.projects) {
              userProfile.projects = userProfile.projects.filter(p => p.id.toString() !== projectId);
            }
            renderProjects();
          } catch (err) {
            alert(`Error: ${(err as Error).message}`);
            (target as HTMLButtonElement).disabled = false;
          }
        }
      }
    });
    
    fetchProfileData();
  });
</script>
<style>
  .profile-page { display: flex; flex-direction: column; gap: 3rem; overflow: hidden; overflow-x: hidden; /* Prevent horizontal scrolling */}
  .form-section { border-top: 1px solid var(--border-color); padding-top: 2rem; }
  .form-section:first-child { border-top: none; padding-top: 0; }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 1rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .image-preview-wrapper { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); }
  .image-preview { height: 50px; width: 50px; border-radius: 8px; object-fit: cover; }
  .form-actions { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 1rem; }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--accent-color); color: var(--button-text-color); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--text-color); border: 1px solid var(--border-color); }
  #profile-form-status, #project-form-status { font-size: 0.9rem; color: var(--hint-color); text-align: right; flex-grow: 1; }
  .hint-text { color: var(--hint-color); text-align: center; font-style: italic; }

  /* --- DEFINITIVE STYLES FOR PROJECT MANAGEMENT (FLEXBOX CARD APPROACH) --- */

  .project-list { 
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem; 
    margin-bottom: 2rem; 
    overflow: hidden;
    overflow-x: hidden; /* Prevent horizontal scrolling */
  }
  @media (min-width: 600px) {
    .project-list {
      grid-template-columns: repeat(2, 1fr);
    }
  }
    
  .project-item {
    background-color: var(--bg-color);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    overflow-x: hidden; /* Prevent horizontal scrolling */
  }

  /* Container using padding-top hack for aspect ratio */
  .project-image-container {
    position: relative;
    width: 100%;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
    background-color: var(--secondary-bg-color);
    overflow: hidden;
  }
    
  .project-item-image { 
    position: absolute;
    overflow: hidden;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .project-item-info {
    padding: 1rem;
    flex-grow: 1;
    text-align: left;
  }

  .project-item-title { 
    font-weight: 600; 
    margin: 0; 
  }

  .project-item-actions { 
    padding: 0 1rem 1rem;
  }

  .btn-delete { 
    background: #ff4d4d; 
    color: white; 
    border: none;
    padding: 0.6rem 1rem;
    width: 100%;
    border-radius: 8px; 
    cursor: pointer; 
    font-weight: 500;
  }
</style>