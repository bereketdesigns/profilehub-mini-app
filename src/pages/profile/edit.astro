---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - DivineX">
  <div class="profile-page" data-hide-fab="true">
    <h1>Edit Your Profile</h1>
    <p id="page-subtitle">Initializing...</p>
    <form id="profile-form" class="profile-form">
      <input type="hidden" name="profile_picture_url" id="profile-picture-url" />
      <label>Display Name <input type="text" name="username" id="username" required /></label>
      <label>Profession
        <select name="profession" id="profession" required>
          <option value="Brand Designer">Brand Designer</option>
          <option value="UI/UX Designer">UI/UX Designer</option>
          <option value="Developer">Developer</option>
          <option value="Product Manager">Product Manager</option>
          <option value="Illustrator">Illustrator</option>
          <option value="Photographer">Photographer</option>
        </select>
      </label>
      <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
      <label>Contact Link (Telegram) <input type="text" name="contact_link" id="contact-link-input" /></label>
      <label>Portfolio Link (Optional) <input type="text" name="portfolio_link" id="portfolio-link-input" placeholder="https://dribbble.com/your-profile" /></label>
      <label>Replace Profile Picture (Optional) <input type="file" id="avatar-upload" accept="image/*" /></label>
      <div class="image-preview-wrapper">
        <span>Current:</span>
        <img src="" alt="Current profile picture" id="image-preview" class="image-preview" />
      </div>
      <div id="form-status"></div>
    </form>
    <div class="form-footer-fab">
      <button type="submit" id="submit-btn" form="profile-form" class="btn-primary">Save Changes</button>
    </div>
  </div>
</MainLayout>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const profileForm = document.getElementById('profile-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const formStatus = document.getElementById('form-status') as HTMLDivElement;
    const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
    const usernameInput = document.getElementById('username') as HTMLInputElement;
    const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
    const contactLinkInput = document.getElementById('contact-link-input') as HTMLInputElement;
    const portfolioLinkInput = document.getElementById('portfolio-link-input') as HTMLInputElement;
    const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
    const profilePictureUrlInput = document.getElementById('profile-picture-url') as HTMLInputElement;
    const imagePreview = document.getElementById('image-preview') as HTMLImageElement;
    const professionInput = document.getElementById('profession') as HTMLSelectElement;

    type TelegramWebApp = typeof window.Telegram.WebApp;

    function initializeApp() {
      if (!window.Telegram?.WebApp?.initData) {
        setTimeout(initializeApp, 50);
        return;
      }
      const tg = window.Telegram.WebApp;
      tg.ready();
      fetchProfileData(tg);
      profileForm.addEventListener('submit', (e) => handleFormSubmit(e, tg));
    }

    async function fetchProfileData(tg: TelegramWebApp) {
      pageSubtitle.textContent = "Loading your data...";
      try {
        const response = await fetch('/api/profiles/me', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) throw new Error('Could not fetch your profile.');
        const data = await response.json();
        if (!data?.profile) throw new Error('Invalid data received.');
        usernameInput.value = data.profile.username || '';
        bioInput.value = data.profile.bio || '';
        contactLinkInput.value = data.profile.contact_link || '';
        portfolioLinkInput.value = data.profile.portfolio_link || ''; // Populate new field
        professionInput.value = data.profile.profession || '';
        profilePictureUrlInput.value = data.profile.profile_picture_url || '';
        imagePreview.src = data.profile.profile_picture_url || '/default-avatar.png';
        profileForm.style.display = 'flex';
        pageSubtitle.textContent = 'Update your public information.';
      } catch (err) {
        const error = err as Error;
        pageSubtitle.textContent = `Error: ${error.message}`;
      }
    }

    async function handleFormSubmit(e: SubmitEvent, tg: TelegramWebApp) {
      e.preventDefault();
      submitBtn.disabled = true;
      formStatus.textContent = 'Processing...';
      const newImageFile = avatarUpload.files?.[0];
      try {
        if (newImageFile) {
          formStatus.textContent = 'Uploading new image...';
          const uploadedImageUrl = await uploadFile(newImageFile);
          profilePictureUrlInput.value = uploadedImageUrl;
        }
        formStatus.textContent = 'Saving changes...';
        const formData = new FormData(profileForm);
        const updatedData = {
          username: formData.get('username'),
          bio: formData.get('bio'),
          contact_link: formData.get('contact_link'),
          portfolio_link: formData.get('portfolio_link'), // Add new field
          profession: formData.get('profession'),
          profile_picture_url: profilePictureUrlInput.value,
          initData: tg.initData,
        };
        const response = await fetch('/api/profiles/update', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(updatedData),
        });
        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || 'Failed to save changes.');
        }
        alert('Profile updated successfully!');
        tg.close();
      } catch (err) {
        const error = err as Error;
        alert(`Failed to save changes: ${error.message}`);
        submitBtn.disabled = false;
        formStatus.textContent = 'Failed. Please try again.';
      }
    }

    async function uploadFile(file: File): Promise<string> {
      const response = await fetch('/api/profiles/upload', {
        method: 'POST', body: file, headers: { 'Content-Type': file.type }
      });
      if (!response.ok) throw new Error('Upload failed.');
      return (await response.json()).url;
    }
    
    initializeApp();
  });
</script>
<style>
  /* Use the same styles as me.astro for consistency */
  .profile-page { padding-bottom: 100px; }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select {
    width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px;
    border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color);
  }
  .image-preview-wrapper { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); }
  .image-preview { height: 50px; width: 50px; border-radius: 8px; object-fit: cover; }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; margin-top: 0.5rem; min-height: 1.2em; }
  .form-footer-fab {
    position: fixed; bottom: 0; left: 0; right: 0;
    padding: 1rem; background: var(--bg-color);
    border-top: 1px solid var(--border-color);
    display: flex; justify-content: flex-end; z-index: 100;
  }
  .btn-primary {
    background-color: var(--accent-color); color: var(--button-text-color);
    padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem;
    font-weight: 600; cursor: pointer;
  }
  .btn-primary:disabled { opacity: 0.5; cursor: not-allowed; }
</style>