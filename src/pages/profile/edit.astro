---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - DivineX">
  <div class="edit-page-layout">
    <form id="profile-form" class="profile-form">
      <h1>Edit Your Profile</h1>
      <p id="page-subtitle">Initializing...</p>
      
      <div id="main-form-fields" style="display: none; width: 100%; display: flex; flex-direction: column; gap: 1rem;">
        <input type="hidden" id="profile-id" />
        <input type="hidden" name="profile_picture_url" id="profile-picture-url" />
        <label>Username <input type="text" name="username" id="username" required /></label>
        <label>Profession
          <select name="profession" id="profession" required>
            <option value="Brand Designer">Brand Designer</option>
            <option value="UI/UX Designer">UI/UX Designer</option>
            <option value="Developer">Developer</option>
            <option value="Product Manager">Product Manager</option>
            <option value="Illustrator">Illustrator</option>
            <option value="Photographer">Photographer</option>
          </select>
        </label>
        <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
        <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" /></label>
        <label>Replace Profile Picture (Optional) <input type="file" id="avatar-upload" accept="image/*" /></label>
        <div class="image-preview-wrapper">
          <span>Current:</span>
          <img src="" alt="Current profile picture" id="image-preview" class="image-preview" />
        </div>
        <div class="form-actions"><button type="submit" id="submit-btn" class="btn btn-primary">Save Profile Changes</button></div>
        <div id="form-status"></div>
      </div>
    </form>

    <div id="projects-section" class="projects-section" style="display: none;">
      <h2>Manage Projects</h2>
      <div id="projects-grid" class="projects-grid"></div>
      <button id="add-project-btn" class="btn btn-secondary">Add New Project</button>
    </div>

  </div>

  <div id="project-modal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <h3 id="modal-title">Add New Project</h3>
      <form id="project-form">
        <input type="hidden" id="project-id" />
        <input type="hidden" id="project-image-url" />
        <label>Title <input type="text" id="project-title" required /></label>
        <label>Description <textarea id="project-description" rows="3"></textarea></label>
        <label>Image <input type="file" id="project-image-upload" accept="image/*" /></label>
        <img id="project-image-preview" src="" class="image-preview" style="display:none;" />
        <div class="modal-actions">
          <button type="button" id="delete-project-btn" class="btn btn-danger" style="display:none;">Delete</button>
          <div style="flex-grow: 1;"></div>
          <button type="button" id="cancel-project-btn" class="btn btn-secondary">Cancel</button>
          <button type="submit" id="save-project-btn" class="btn btn-primary">Save Project</button>
        </div>
        <div id="modal-status"></div>
      </form>
    </div>
  </div>
</MainLayout>

<script>
// The entire <script> block is unchanged and correct.
interface Project { id: number; title: string; description: string; image_url: string; }
interface Profile { id: number; username: string; profession: string; bio: string; contact_link: string; profile_picture_url: string; projects: Project[]; }

document.addEventListener('DOMContentLoaded', () => {
  let userProfile: Profile | null = null;
  let tg: any = null;
  const profileForm = document.getElementById('profile-form') as HTMLFormElement;
  const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
  const mainFormFields = document.getElementById('main-form-fields') as HTMLDivElement;
  const profileIdInput = document.getElementById('profile-id') as HTMLInputElement;
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  const professionInput = document.getElementById('profession') as HTMLSelectElement;
  const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
  const contactLinkInput = document.getElementById('contact_link') as HTMLInputElement;
  const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement;
  const profilePictureUrlInput = document.getElementById('profile-picture-url') as HTMLInputElement;
  const imagePreview = document.getElementById('image-preview') as HTMLImageElement;
  const profileFormStatus = document.getElementById('form-status') as HTMLDivElement;
  const profileSubmitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const projectsSection = document.getElementById('projects-section') as HTMLDivElement;
  const projectsGrid = document.getElementById('projects-grid') as HTMLDivElement;
  const addProjectBtn = document.getElementById('add-project-btn') as HTMLButtonElement;
  const projectModal = document.getElementById('project-modal') as HTMLDivElement;
  const modalTitle = document.getElementById('modal-title') as HTMLHeadingElement;
  const projectForm = document.getElementById('project-form') as HTMLFormElement;
  const projectIdInput = document.getElementById('project-id') as HTMLInputElement;
  const projectImageUrlInput = document.getElementById('project-image-url') as HTMLInputElement;
  const projectTitleInput = document.getElementById('project-title') as HTMLInputElement;
  const projectDescriptionInput = document.getElementById('project-description') as HTMLTextAreaElement;
  const projectImageUpload = document.getElementById('project-image-upload') as HTMLInputElement;
  const projectImagePreview = document.getElementById('project-image-preview') as HTMLImageElement;
  const cancelProjectBtn = document.getElementById('cancel-project-btn') as HTMLButtonElement;
  const saveProjectBtn = document.getElementById('save-project-btn') as HTMLButtonElement;
  const deleteProjectBtn = document.getElementById('delete-project-btn') as HTMLButtonElement;
  const modalStatus = document.getElementById('modal-status') as HTMLDivElement;
  
  function initializeApp() {
    if (!window.Telegram?.WebApp?.initData) {
      setTimeout(initializeApp, 50); return;
    }
    tg = window.Telegram.WebApp;
    tg.ready();
    fetchProfileAndProjects();
    addEventListeners();
  }

  async function fetchProfileAndProjects() {
    if (!pageSubtitle) return;
    pageSubtitle.textContent = "Loading your data...";
    try {
      const response = await fetch('/api/profiles/me-with-projects', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ initData: tg.initData }),
      });
      if (!response.ok) throw new Error('Could not fetch profile and projects.');
      const data = await response.json();
      if (!data?.profile) throw new Error('Invalid data from server.');
      userProfile = data.profile;
      
      populateProfileForm();
      renderProjects();
      
      mainFormFields.style.display = 'flex';
      projectsSection.style.display = 'block';
      pageSubtitle.textContent = 'Update your public information.';
    } catch (err) {
      pageSubtitle.textContent = `Error: ${(err as Error).message}`;
    }
  }

  function populateProfileForm() {
    if (!userProfile) return;
    profileIdInput.value = userProfile.id.toString();
    usernameInput.value = userProfile.username || '';
    professionInput.value = userProfile.profession || '';
    bioInput.value = userProfile.bio || '';
    contactLinkInput.value = userProfile.contact_link || '';
    profilePictureUrlInput.value = userProfile.profile_picture_url || '';
    imagePreview.src = userProfile.profile_picture_url || '/default-avatar.png';
  }

  function renderProjects() {
    if (!userProfile) return;
    projectsGrid.innerHTML = '';
    userProfile.projects.forEach((project: Project) => {
      const card = document.createElement('div');
      card.className = 'project-card';
      card.innerHTML = `
        <img src="${project.image_url || '/default-avatar.png'}" alt="${project.title}" class="project-image" />
        <div class="project-info">
          <h3 class="project-title">${project.title}</h3>
          <p class="project-description">${project.description || ''}</p>
        </div>
        <div class="edit-overlay">Click to Edit</div>
      `;
      card.addEventListener('click', () => openProjectModal(project));
      projectsGrid.appendChild(card);
    });
    addProjectBtn.disabled = userProfile.projects.length >= 4;
  }

  function openProjectModal(project: Project | null = null) {
    projectForm.reset();
    modalStatus.textContent = '';
    if(projectImagePreview) projectImagePreview.style.display = 'none';
    if(projectImagePreview) projectImagePreview.src = '';

    if (project) { // Editing
      modalTitle.textContent = 'Edit Project';
      projectIdInput.value = project.id.toString();
      projectImageUrlInput.value = project.image_url || '';
      projectTitleInput.value = project.title;
      projectDescriptionInput.value = project.description;
      if (project.image_url && projectImagePreview) {
        projectImagePreview.src = project.image_url;
        projectImagePreview.style.display = 'block';
      }
      deleteProjectBtn.style.display = 'block';
    } else { // Adding
      modalTitle.textContent = 'Add New Project';
      projectIdInput.value = '';
      projectImageUrlInput.value = '';
      deleteProjectBtn.style.display = 'none';
    }
    projectModal.style.display = 'flex';
  }

  function closeProjectModal() {
    projectModal.style.display = 'none';
  }
  
  async function uploadFile(file: File, endpoint: string): Promise<string> {
    const response = await fetch(endpoint, {
      method: 'POST', body: file, headers: { 'Content-Type': file.type }
    });
    if (!response.ok) throw new Error('Upload failed.');
    return (await response.json()).url;
  }
  
  async function handleProfileUpdate(e: Event) {
    e.preventDefault();
    profileSubmitBtn.disabled = true;
    profileFormStatus.textContent = 'Processing...';
    const newImageFile = avatarUpload.files?.[0];

    try {
      if (newImageFile) {
        profileFormStatus.textContent = 'Uploading new profile picture...';
        const uploadedImageUrl = await uploadFile(newImageFile, '/api/profiles/upload');
        profilePictureUrlInput.value = uploadedImageUrl;
      }
      
      profileFormStatus.textContent = 'Saving profile changes...';
      const updatedData = {
        username: usernameInput.value,
        bio: bioInput.value,
        contact_link: contactLinkInput.value,
        profession: professionInput.value,
        profile_picture_url: profilePictureUrlInput.value,
        initData: tg.initData,
      };

      const response = await fetch('/api/profiles/update', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData),
      });
      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save changes.');
      }
      alert('Profile updated successfully!');
    } catch (err) {
      alert(`Failed to save profile: ${(err as Error).message}`);
    } finally {
      profileSubmitBtn.disabled = false;
      profileFormStatus.textContent = '';
    }
  }

  async function handleProjectSave(e: Event) {
    e.preventDefault();
    saveProjectBtn.disabled = true;
    modalStatus.textContent = 'Saving...';
    try {
      let imageUrl = projectImageUrlInput.value;
      const imageFile = projectImageUpload.files?.[0];
      if (imageFile) {
        modalStatus.textContent = 'Uploading project image...';
        imageUrl = await uploadFile(imageFile, '/api/projects/upload');
      }

      if (!imageUrl && !projectIdInput.value) {
        throw new Error('An image is required for a new project.');
      }

      const isEditing = !!projectIdInput.value;
      const endpoint = isEditing ? '/api/projects/update' : '/api/projects/create';
      if (!userProfile) throw new Error("User profile not loaded.");

      const payload = {
        initData: tg.initData,
        profile_id: userProfile.id,
        project_id: isEditing ? parseInt(projectIdInput.value) : undefined,
        title: projectTitleInput.value,
        description: projectDescriptionInput.value,
        image_url: imageUrl,
      };

      const response = await fetch(endpoint, {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save project.');
      }
      await fetchProfileAndProjects();
      closeProjectModal();
    } catch (err) {
      modalStatus.textContent = `Error: ${(err as Error).message}`;
    } finally {
      saveProjectBtn.disabled = false;
    }
  }

  async function handleDeleteProject() {
    if (!confirm('Are you sure you want to delete this project?')) return;
    deleteProjectBtn.disabled = true;
    modalStatus.textContent = 'Deleting...';
    try {
      const response = await fetch('/api/projects/delete', {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ initData: tg.initData, project_id: parseInt(projectIdInput.value) })
      });
      if (!response.ok) throw new Error('Failed to delete project.');
      await fetchProfileAndProjects();
      closeProjectModal();
    } catch (err) {
      modalStatus.textContent = `Error: ${(err as Error).message}`;
    } finally {
      deleteProjectBtn.disabled = false;
    }
  }

  function addEventListeners() {
    profileForm.addEventListener('submit', handleProfileUpdate);
    addProjectBtn.addEventListener('click', () => openProjectModal());
    cancelProjectBtn.addEventListener('click', closeProjectModal);
    projectForm.addEventListener('submit', handleProjectSave);
    deleteProjectBtn.addEventListener('click', handleDeleteProject);
  }
  
  initializeApp();
});
</script>
<style>
  .edit-page-layout {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    max-width: 1200px;
    margin: 0 auto;
  }
  @media (min-width: 992px) {
    .edit-page-layout {
      grid-template-columns: minmax(0, 1.5fr) minmax(0, 2fr);
      align-items: start;
    }
  }

  .profile-form {
    background-color: var(--secondary-bg-color);
    padding: 1.5rem;
    border-radius: 16px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .profile-form h1 { font-size: 2rem; margin-top: 0; }
  #page-subtitle { color: var(--hint-color); }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select {
    width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px;
    border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color);
  }
  .image-preview-wrapper { display: flex; align-items: center; gap: 1rem; font-size: 0.9em; color: var(--hint-color); }
  .image-preview { height: 50px; width: 50px; border-radius: 8px; object-fit: cover; }
  .form-actions { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 1rem; width: 100%; }
  
  .projects-section { 
    background-color: var(--secondary-bg-color);
    padding: 1.5rem;
    border-radius: 16px;
    border: 1px solid var(--border-color);
  }
  .projects-section h2 { font-size: 1.5rem; margin: 0 0 1.5rem; }
  
  /* !!! DEFINITIVE RESPONSIVE GRID FIX !!! */
  .projects-grid {
    display: grid;
    /* MOBILE-FIRST: Default to two columns, which is good for this view */
    grid-template-columns: repeat(1, 1fr);
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  /* WIDER SCREENS: Switch to more columns when there's space */
  @media (min-width: 500px) {
    .projects-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  @media (min-width: 768px) {
    .projects-grid {
      /* On desktop, the projects section is wide, so we can fit more */
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    }
  }


  .project-card {
    background-color: var(--bg-color);
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid var(--border-color);
    cursor: pointer;
    position: relative;
    transition: transform 0.2s ease;
    aspect-ratio: 1 / 1; 
  }
  .project-card:hover { transform: translateY(-4px); }
  .project-image { width: 100%; height: 100%; object-fit: cover; }
  .project-info {
    position: absolute; bottom: 0; left: 0; right: 0;
    padding: 0.75rem;
    background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 100%);
  }
  .project-title {
    font-size: 0.9rem; font-weight: 600; margin: 0;
    color: white; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
  }
  .project-description { display: none; }
  .edit-overlay {
    position: absolute; inset: 0; background-color: rgba(0,0,0,0.5);
    color: white; display: flex; align-items: center; justify-content: center;
    font-weight: 600; border-radius: 12px; opacity: 0;
    transition: opacity 0.2s ease; font-size: 0.9rem;
  }
  .project-card:hover .edit-overlay { opacity: 1; }
  
  .modal-overlay { position: fixed; inset: 0; background-color: rgba(0,0,0,0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; }
  .modal-content { background-color: var(--bg-color); border-radius: 16px; padding: 2rem; width: 90%; max-width: 500px; }
  .modal-content h3 { margin-top: 0; }
  #project-form { display: flex; flex-direction: column; gap: 1rem; }
  .modal-actions { display: flex; align-items: center; gap: 1rem; margin-top: 1.5rem; }
  #modal-status { font-size: 0.9rem; color: var(--hint-color); }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn:disabled { opacity: 0.5; cursor: not-allowed; }
  .btn-primary { background-color: var(--brand-color); color: var(--button-text-color); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--text-color); border: 1px solid var(--border-color); }
  .btn-danger { background-color: #e53e3e; color: white; }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; width: 100%; }
</style>