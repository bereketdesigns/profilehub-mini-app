---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - ProfileHub">
  <div class="profile-page">
    <h1>Edit Your Profile</h1>
    <p id="page-subtitle">Initializing...</p>

    <form id="profile-form" class="profile-form" style="display: none;">
      <label>Username <input type="text" name="username" id="username" required /></label>
      <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
      <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
      <p class="image-update-notice">To update your profile picture, please create a new profile for now.</p>
      <div class="form-actions">
        <a href="/" class="btn btn-secondary">Cancel</a>
        <button type="submit" id="submit-btn" class="btn btn-primary">Save Changes</button>
      </div>
      <div id="form-status"></div>
    </form>
  </div>
</MainLayout>

<script>
  // --- Element Selectors ---
  const profileForm = document.getElementById('profile-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const formStatus = document.getElementById('form-status') as HTMLDivElement;
  const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
  const contactLinkInput = document.getElementById('contact_link') as HTMLInputElement;

  // --- Main Function to Fetch and Populate ---
  async function fetchProfileData(tg) {
    if (!usernameInput || !bioInput || !contactLinkInput || !profileForm || !pageSubtitle) return;
    
    pageSubtitle.textContent = "Loading your data...";
    
    try {
      // !!! CACHE-BUSTING FIX !!! Append a timestamp to the URL to force a fresh fetch
      const cacheBust = `?v=${Date.now()}`;
      const response = await fetch(`/api/profiles/me${cacheBust}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ initData: tg.initData }),
      });

      if (!response.ok) {
        throw new Error('Could not fetch your profile data. Please create one first.');
      }

      const data = await response.json();

      if (data && data.profile) {
        usernameInput.value = data.profile.username || '';
        bioInput.value = data.profile.bio || '';
        contactLinkInput.value = data.profile.contact_link || '';
        
        profileForm.style.display = 'flex';
        pageSubtitle.textContent = 'Update your public information.';
      } else {
        throw new Error('Received invalid data from the server.');
      }
    } catch (err) {
      const error = err as Error;
      pageSubtitle.textContent = `Error: ${error.message}`;
    }
  }

  // --- Main Function to Handle Form Submission ---
  async function handleFormSubmit(e, tg) {
    e.preventDefault();
    submitBtn.disabled = true;
    formStatus.textContent = 'Saving changes...';

    const formData = new FormData(profileForm);
    const updatedData = {
      username: formData.get('username'),
      bio: formData.get('bio'),
      contact_link: formData.get('contact_link'),
      initData: tg.initData,
    };

    try {
      const response = await fetch('/api/profiles/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData),
      });
      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save changes.');
      }
      alert('Profile updated successfully!');
      tg.close();
    } catch (err) {
      const error = err as Error;
      alert(`Failed to save changes: ${error.message}`);
      submitBtn.disabled = false;
      formStatus.textContent = 'Failed. Please try again.';
    }
  }
  
  // --- RELIABLE INITIALIZATION LOGIC ---
  function initializeApp() {
    if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initData) {
      // The Telegram object is ready!
      const tg = window.Telegram.WebApp;
      tg.ready();
      
      fetchProfileData(tg);
      profileForm?.addEventListener('submit', (e) => handleFormSubmit(e, tg));
    } else {
      // The Telegram object is not ready yet.
      // We will check again in a moment.
      setTimeout(initializeApp, 50); // Poll every 50ms
    }
  }

  // Start the initialization process.
  initializeApp();
</script>
<style>
  /* Styles are unchanged */
  .profile-page { max-width: 600px; margin: 0 auto; }
  .profile-page h1 { font-size: 2rem; }
  #page-subtitle { color: var(--hint-color); }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 2rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .image-update-notice { font-size: 0.9em; color: var(--hint-color); background-color: var(--bg-color); padding: 0.75rem; border-radius: 8px; }
  .form-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1rem; }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--tg-theme-button-color, #007aff); color: var(--tg-theme-button-text-color, #fff); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--tg-theme-text-color, #000); border: 1px solid var(--border-color); }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; margin-top: 0.5rem; min-height: 1.2em; }
</style>