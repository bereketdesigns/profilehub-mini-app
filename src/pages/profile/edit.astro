---
import MainLayout from '../../layouts/MainLayout.astro';
---
<MainLayout title="Edit Your Profile - ProfileHub">
  <div class="profile-page">
    <h1>Edit Your Profile</h1>
    <p id="page-subtitle">Initializing...</p>
    <form id="edit-profile-form" class="profile-form" style="display: none;">
      <input type="hidden" name="id" id="profile-id" />
      <input type="hidden" name="image" id="main-image-url" />
      <input type="hidden" name="images" id="gallery-images-url" />
      <label>Username <input type="text" name="username" id="username" required /></label>
      <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
      <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
      <label>Replace Main Image (Optional) <input type="file" id="main-image-upload" accept="image/*" /></label>
      <div class="image-preview-wrapper">
        <span>Current:</span>
        <img src="" alt="Current main image" id="image-preview" class="image-preview" />
      </div>
      <div class="form-actions">
        <div id="form-status" class="upload-status"></div>
        <a href="/" class="btn btn-secondary">Cancel</a>
        <button type="submit" id="submit-btn" class="btn btn-primary">Save Changes</button>
      </div>
    </form>
  </div>
</MainLayout>
<script>
  const profileForm = document.getElementById('edit-profile-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const formStatus = document.getElementById('form-status') as HTMLDivElement;
  const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
  const usernameInput = document.getElementById('username') as HTMLInputElement;
  const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
  const contactLinkInput = document.getElementById('contact_link') as HTMLInputElement;
  const mainImageUpload = document.getElementById('main-image-upload') as HTMLInputElement;
  const mainImageUrlInput = document.getElementById('main-image-url') as HTMLInputElement;
  const galleryImagesUrlInput = document.getElementById('gallery-images-url') as HTMLInputElement;
  const imagePreview = document.getElementById('image-preview') as HTMLImageElement;

  function initializeApp() {
    if (!window.Telegram?.WebApp?.initData) {
      setTimeout(initializeApp, 50);
      return;
    }
    const tg = window.Telegram.WebApp;
    tg.ready();
    fetchProfileData(tg);
    profileForm.addEventListener('submit', (e) => handleFormSubmit(e, tg));
  }

  async function fetchProfileData(tg) {
    pageSubtitle.textContent = "Loading your data...";
    try {
      const response = await fetch(`/api/profiles/me`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ initData: tg.initData }),
      });
      if (!response.ok) throw new Error('Could not fetch your profile data.');
      const data = await response.json();
      if (!data?.profile) throw new Error('Received invalid data from server.');

      usernameInput.value = data.profile.username || '';
      bioInput.value = data.profile.bio || '';
      contactLinkInput.value = data.profile.contact_link || '';
      mainImageUrlInput.value = data.profile.profile_picture_url || '';
      galleryImagesUrlInput.value = JSON.stringify([data.profile.profile_picture_url || '']);
      imagePreview.src = data.profile.profile_picture_url || '/default-avatar.png';
      
      profileForm.style.display = 'flex';
      pageSubtitle.textContent = 'Update your public information.';
    } catch (err) {
      const error = err as Error;
      pageSubtitle.textContent = `Error: ${error.message}`;
    }
  }

  async function handleFormSubmit(e, tg) {
    e.preventDefault();
    submitBtn.disabled = true;
    formStatus.textContent = 'Processing...';
    const newImageFile = mainImageUpload.files?.[0];
    try {
      if (newImageFile) {
        formStatus.textContent = 'Uploading new image...';
        const uploadedImageUrl = await uploadFile(newImageFile);
        mainImageUrlInput.value = uploadedImageUrl;
        galleryImagesUrlInput.value = JSON.stringify([uploadedImageUrl]);
      }
      formStatus.textContent = 'Saving product data...';
      const formData = new FormData(profileForm);
      const updatedData = {
        username: formData.get('username'),
        bio: formData.get('bio'),
        contact_link: formData.get('contact_link'),
        profile_picture_url: mainImageUrlInput.value, 
        initData: tg.initData,
      };
      const response = await fetch('/api/profiles/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData),
      });
      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save changes.');
      }
      alert('Profile updated successfully!');
      tg.close();
    } catch (err) {
      const error = err as Error;
      alert(`Failed to save changes: ${error.message}`);
      submitBtn.disabled = false;
      formStatus.textContent = 'Failed. Please try again.';
    }
  }

  async function uploadFile(file: File): Promise<string> {
    const response = await fetch('/api/profiles/upload', {
      method: 'POST', body: file, headers: { 'Content-Type': file.type }
    });
    if (!response.ok) throw new Error('Upload failed.');
    return (await response.json()).url;
  }
  
  initializeApp();
</script>
<style>
  /* Styles are unchanged */
  .profile-page { max-width: 600px; margin: 0 auto; }
  .profile-page h1 { font-size: 2rem; }
  #page-subtitle { color: var(--hint-color); }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 2rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .image-update-notice { font-size: 0.9em; color: var(--hint-color); background-color: var(--bg-color); padding: 0.75rem; border-radius: 8px; }
  .form-actions { display: flex; justify-content: flex-end; gap: 1rem; margin-top: 1rem; }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--tg-theme-button-color, #007aff); color: var(--tg-theme-button-text-color, #fff); }
  .btn-secondary { background-color: var(--secondary-bg-color); color: var(--tg-theme-text-color, #000); border: 1px solid var(--border-color); }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; margin-top: 0.5rem; min-height: 1.2em; }
</style>