---
import MainLayout from '../../layouts/MainLayout.astro';
import type { Profile, Project } from '../../lib/types';
---
<MainLayout title="Manage Profile - DivineX">
  <div class="page-container">
    <!-- Section 1: Edit Profile Details -->
    <section class="form-section">
      <h1>Edit Profile</h1>
      <p id="page-subtitle">Initializing...</p>
      <form id="profile-form" class="profile-form" style="display:none;">
        <label>Username <input type="text" name="username" id="username" required /></label>
        <label>Profession <select name="profession" id="profession" required>
            <option value="Brand Designer">Brand Designer</option>
            <option value="UI/UX Designer">UI/UX Designer</option>
            <option value="Developer">Developer</option>
            <option value="Product Manager">Product Manager</option>
            <option value="Illustrator">Illustrator</option>
            <option value="Photographer">Photographer</option>
          </select>
        </label>
        <label>Bio <textarea name="bio" id="bio" rows="4" required></textarea></label>
        <label>Contact Link (Optional) <input type="url" name="contact_link" id="contact_link" placeholder="https://t.me/yourusername" /></label>
        <div class="form-actions">
          <button type="submit" id="profile-submit-btn" class="btn btn-primary">Save Profile Changes</button>
        </div>
        <div id="profile-form-status" class="form-status"></div>
      </form>
    </section>

    <!-- Section 2: Manage Projects -->
    <section id="projects-section" class="form-section" style="display:none;">
      <h1>My Projects</h1>
      <div id="projects-list"></div>
      <div id="add-project-container">
        <button id="add-project-btn" class="btn btn-secondary">Add New Project</button>
      </div>
    </section>
  </div>

  <!-- Modal for Adding/Editing Projects -->
  <div id="project-modal" class="modal-overlay" style="display: none;">
    <div class="modal-content">
      <h2 id="modal-title">Add Project</h2>
      <form id="project-form">
        <input type="hidden" id="project-id" />
        <label>Title <input type="text" id="project-title" required /></label>
        <label>Description <textarea id="project-description" rows="3" required></textarea></label>
        <label>Image <input type="file" id="project-image-upload" accept="image/*" /></label>
        <div class="form-actions">
          <button type="button" id="modal-cancel-btn" class="btn btn-secondary">Cancel</button>
          <button type="submit" id="modal-save-btn" class="btn btn-primary">Save Project</button>
        </div>
        <div id="project-form-status" class="form-status"></div>
      </form>
    </div>
  </div>
</MainLayout>
<script>
  import type { Profile, Project } from '../../lib/types';

  document.addEventListener('DOMContentLoaded', () => {
    let userProfile: Profile | null = null;
    const tg = window.Telegram?.WebApp;

    const pageSubtitle = document.getElementById('page-subtitle') as HTMLParagraphElement;
    const profileForm = document.getElementById('profile-form') as HTMLFormElement;
    const profileSubmitBtn = document.getElementById('profile-submit-btn') as HTMLButtonElement;
    const profileFormStatus = document.getElementById('profile-form-status') as HTMLDivElement;
    const usernameInput = document.getElementById('username') as HTMLInputElement;
    const professionInput = document.getElementById('profession') as HTMLSelectElement;
    const bioInput = document.getElementById('bio') as HTMLTextAreaElement;
    const contactLinkInput = document.getElementById('contact_link') as HTMLInputElement;
    const projectsSection = document.getElementById('projects-section') as HTMLElement;
    const projectsList = document.getElementById('projects-list') as HTMLDivElement;
    const addProjectBtn = document.getElementById('add-project-btn') as HTMLButtonElement;
    const projectModal = document.getElementById('project-modal') as HTMLDivElement;
    const modalTitle = document.getElementById('modal-title') as HTMLHeadingElement;
    const projectForm = document.getElementById('project-form') as HTMLFormElement;
    const projectIdInput = document.getElementById('project-id') as HTMLInputElement;
    const projectTitleInput = document.getElementById('project-title') as HTMLInputElement;
    const projectDescriptionInput = document.getElementById('project-description') as HTMLTextAreaElement;
    const projectImageUpload = document.getElementById('project-image-upload') as HTMLInputElement;
    const modalCancelBtn = document.getElementById('modal-cancel-btn') as HTMLButtonElement;
    const modalSaveBtn = document.getElementById('modal-save-btn') as HTMLButtonElement;
    const projectFormStatus = document.getElementById('project-form-status') as HTMLDivElement;

    function initializeApp() {
      if (!tg?.initData) { setTimeout(initializeApp, 50); return; }
      tg.ready();
      attachEventListeners();
      fetchFullProfileData();
    }

    async function fetchFullProfileData() {
      pageSubtitle.textContent = 'Loading your profile...';
      try {
        const response = await fetch('/api/profiles/me', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData }),
        });
        if (!response.ok) throw new Error('Could not fetch your profile.');
        const data = await response.json();
        userProfile = data.profile;
        populateProfileForm();
        renderProjects();
        profileForm.style.display = 'block';
        projectsSection.style.display = 'block';
        pageSubtitle.textContent = 'Manage your public information.';
      } catch (err) { pageSubtitle.textContent = (err as Error).message; }
    }

    function populateProfileForm() {
      if (!userProfile) return;
      usernameInput.value = userProfile.username || '';
      professionInput.value = userProfile.profession || '';
      bioInput.value = userProfile.bio || '';
      contactLinkInput.value = userProfile.contact_link || '';
    }

    function renderProjects() {
      if (!userProfile?.projects) return;
      projectsList.innerHTML = '';
      userProfile.projects.sort((a,b) => a.display_order - b.display_order).forEach(project => {
        const projectEl = document.createElement('div');
        projectEl.className = 'project-item';
        projectEl.innerHTML = `
          <img src="${project.image_url}" alt="${project.title}" class="project-item-img"/>
          <div class="project-item-info"><h4>${project.title}</h4><p>${project.description}</p></div>
          <div class="project-item-actions">
            <button class="btn-icon edit-project-btn" data-id="${project.id}">Edit</button>
            <button class="btn-icon delete-project-btn" data-id="${project.id}">Delete</button>
          </div>
        `;
        projectsList.appendChild(projectEl);
      });
      addProjectBtn.style.display = userProfile.projects.length >= 4 ? 'none' : 'block';
    }

    function openProjectModal(project: Project | null = null) {
      projectForm.reset();
      projectFormStatus.textContent = '';
      if (project) {
        modalTitle.textContent = 'Edit Project';
        projectIdInput.value = project.id.toString();
        projectTitleInput.value = project.title;
        projectDescriptionInput.value = project.description;
        projectImageUpload.required = false;
      } else {
        modalTitle.textContent = 'Add Project';
        projectIdInput.value = '';
        projectImageUpload.required = true;
      }
      projectModal.style.display = 'flex';
    }

    function closeProjectModal() {
      projectModal.style.display = 'none';
    }

    async function handleProfileSave(e: Event) {
      e.preventDefault();
      alert('Profile save function is ready.');
    }

    async function handleProjectSave(e: Event) {
      e.preventDefault();
      // !!! THE FIX: Add a guard to ensure userProfile is not null !!!
      if (!userProfile) return;

      modalSaveBtn.disabled = true;
      projectFormStatus.textContent = 'Saving...';
      const projectId = projectIdInput.value;
      const isEditing = !!projectId;
      const imageFile = projectImageUpload.files?.[0];

      try {
        let imageUrl = '';
        if (isEditing) {
          const existingProject = userProfile.projects.find(p => p.id == Number(projectId));
          imageUrl = existingProject?.image_url || '';
        }
        if (imageFile) {
          projectFormStatus.textContent = 'Uploading image...';
          imageUrl = await uploadFile(imageFile, '/api/projects/upload');
        }
        if (!imageUrl) throw new Error('Project image is required.');

        const projectData = {
          title: projectTitleInput.value,
          description: projectDescriptionInput.value,
          image_url: imageUrl,
          initData: tg.initData,
        };

        const url = isEditing ? `/api/projects/update` : `/api/projects/create`;
        const body = isEditing 
          ? JSON.stringify({ ...projectData, project_id: projectId }) 
          : JSON.stringify({ ...projectData, profile_id: userProfile.id }); // This line is now safe

        const response = await fetch(url, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: body,
        });
        if (!response.ok) throw await response.json();
        
        await fetchFullProfileData();
        closeProjectModal();
      } catch (err) {
        projectFormStatus.textContent = `Error: ${(err as Error).message}`;
      } finally {
        modalSaveBtn.disabled = false;
      }
    }

    async function handleDeleteProject(projectId: string) {
      if (!confirm('Are you sure you want to delete this project?')) return;
      try {
        const response = await fetch('/api/projects/delete', {
          method: 'POST', headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ initData: tg.initData, project_id: projectId }),
        });
        if (!response.ok) throw await response.json();
        await fetchFullProfileData();
      } catch (err) { alert(`Error: ${(err as Error).message}`); }
    }

    function attachEventListeners() {
      profileForm.addEventListener('submit', handleProfileSave);
      projectForm.addEventListener('submit', handleProjectSave);
      addProjectBtn.addEventListener('click', () => openProjectModal());
      modalCancelBtn.addEventListener('click', closeProjectModal);
      projectsList.addEventListener('click', (e: Event) => {
        const target = e.target as HTMLElement;
        const projectId = target.dataset.id;
        if (target.matches('.edit-project-btn') && projectId) {
          const project = userProfile?.projects.find(p => p.id == Number(projectId));
          if (project) openProjectModal(project);
        }
        if (target.matches('.delete-project-btn') && projectId) {
          handleDeleteProject(projectId);
        }
      });
    }
    
    async function uploadFile(file: File, url: string): Promise<string> {
      const response = await fetch(url, { method: 'POST', body: file });
      if (!response.ok) throw new Error('Upload failed.');
      return (await response.json()).url;
    }
    
    initializeApp();
  });
</script>
<style>
  .page-container { display: flex; flex-direction: column; gap: 2rem; }
  .form-section { background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; }
  .form-section h1 { font-size: 1.5rem; margin: 0 0 1.5rem; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea, .profile-form select { width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px; border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color); }
  .form-actions { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 1.5rem; }
  .btn { padding: 0.8rem 1.5rem; border: none; border-radius: 8px; font-size: 1rem; font-weight: 600; cursor: pointer; text-decoration: none; }
  .btn-primary { background-color: var(--accent-color); color: var(--button-text-color); }
  .btn-secondary { background-color: transparent; color: var(--text-color); border: 1px solid var(--border-color); }
  .form-status { font-size: 0.9rem; color: var(--hint-color); text-align: left; flex-grow: 1; }
  #projects-list { display: flex; flex-direction: column; gap: 1rem; }
  .project-item { display: flex; align-items: center; gap: 1rem; background-color: var(--bg-color); padding: 1rem; border-radius: 12px; }
  .project-item-img { width: 80px; height: 60px; object-fit: cover; border-radius: 8px; }
  .project-item-info { flex-grow: 1; }
  .project-item-info h4 { margin: 0 0 0.25rem; }
  .project-item-info p { margin: 0; font-size: 0.9em; color: var(--hint-color); }
  .btn-icon { background: none; border: none; cursor: pointer; color: var(--hint-color); }
  .modal-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.6); display: flex; align-items: center; justify-content: center; z-index: 1000; }
  .modal-content { background-color: var(--bg-color); padding: 2rem; border-radius: 16px; width: 90%; max-width: 500px; }
  .modal-content h2 { margin-top: 0; }
</style>