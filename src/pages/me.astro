---
import MainLayout from '../layouts/MainLayout.astro';
---
<MainLayout title="My Profile - ProfileHub">
  <div class="profile-page">
    <h1>Create Your Profile</h1>
    <p>Share your profile with the community.</p>
    <form id="profile-form" class="profile-form">
      <label>Username <input type="text" name="username" required /></label>
      <label>Bio <textarea name="bio" rows="4" required></textarea></label>
      <label>Contact Link (Optional) <input type="url" name="contact_link" placeholder="https://t.me/yourusername" /></label>
      <label>Profile Picture <input type="file" id="avatar-upload" accept="image/*" required /></label>
      <button type="submit" id="submit-btn">Create Profile</button>
      <div id="form-status"></div>
    </form>
  </div>
</MainLayout>

<script>
  const profileForm = document.getElementById('profile-form') as HTMLFormElement | null;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement | null;
  const formStatus = document.getElementById('form-status') as HTMLDivElement | null;
  const avatarUpload = document.getElementById('avatar-upload') as HTMLInputElement | null;

  async function uploadFile(file: File): Promise<string> {
    const response = await fetch('/api/profiles/upload', {
      method: 'POST', body: file, headers: { 'Content-Type': file.type }
    });
    if (!response.ok) {
      const result = await response.json();
      throw new Error(`Upload failed: ${result.error}`);
    }
    return (await response.json()).url;
  }

  profileForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!submitBtn || !formStatus || !avatarUpload || !window.Telegram.WebApp) return;

    // We can only submit if we're inside Telegram
    if (window.Telegram.WebApp.initData === '') {
      alert('This form can only be submitted from within the Telegram app.');
      return;
    }

    submitBtn.disabled = true;
    formStatus.textContent = 'Uploading picture...';

    const avatarFile = avatarUpload.files?.[0];
    if (!avatarFile) {
      alert('Please select a profile picture.');
      submitBtn.disabled = false;
      formStatus.textContent = '';
      return;
    }

    try {
      const uploadedImageUrl = await uploadFile(avatarFile);
      formStatus.textContent = 'Picture uploaded! Creating profile...';

      const formData = new FormData(profileForm);
      const profileData = {
        username: formData.get('username'),
        bio: formData.get('bio'),
        contact_link: formData.get('contact_link'),
        profile_picture_url: uploadedImageUrl,
        // Include the user's secret initData for backend validation
        initData: window.Telegram.WebApp.initData,
      };

      const createResponse = await fetch('/api/profiles/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(profileData),
      });

      if (createResponse.ok) {
        alert('Profile created successfully!');
        window.Telegram.WebApp.close(); // Close the Mini App on success
      } else {
        const result = await createResponse.json();
        throw new Error(result.error);
      }
    } catch (err) {
      const error = err as Error;
      alert(`An error occurred: ${error.message}`);
      formStatus.textContent = 'Failed. Please try again.';
      submitBtn.disabled = false;
    }
  });
</script>
<style>
  .profile-page { max-width: 600px; margin: 0 auto; }
  .profile-page h1 { font-size: 2rem; }
  .profile-form { display: flex; flex-direction: column; gap: 1rem; background-color: var(--secondary-bg-color); padding: 1.5rem; border-radius: 16px; margin-top: 2rem; }
  .profile-form label { font-weight: 500; display: flex; flex-direction: column; gap: 0.25rem; }
  .profile-form input, .profile-form textarea {
    width: 100%; padding: 0.75rem; font-size: 1rem; border-radius: 8px;
    border: 1px solid var(--border-color); background-color: var(--bg-color); color: var(--text-color);
  }
  .profile-form button {
    background-color: var(--brand-color); /* Uses our brand color */
    color: var(--brand-text-color); /* Uses our brand text color */
    padding: 0.8rem; border: none; border-radius: 8px; font-size: 1.1rem;
    font-weight: 600; cursor: pointer; margin-top: 1rem;
  }
  #form-status { font-size: 0.9rem; color: var(--hint-color); text-align: center; margin-top: 0.5rem; min-height: 1.2em; }
</style>