---
import '../styles/global.css';
import NavBar from '../components/NavBar.astro';
import { supabase } from '../lib/supabase';
import { validate } from '../lib/auth';

interface Props { title: string; }
const { title } = Astro.props;

// --- THIS IS THE NEW SERVER-SIDE LOGIC ---
let userHasProfile = false; // Default to false
let shouldHideFab = false;

// 1. Astro gives us access to request headers on the server.
// Telegram passes the initData in a header for server-side rendering.
const initDataHeader = Astro.request.headers.get('X-Telegram-Init-Data');

if (initDataHeader) {
  // 2. If the header exists, validate the user.
  const user = await validate(initDataHeader);
  if (user) {
    // 3. If the user is valid, check if they have a profile in the database.
    const { data: profile } = await supabase
      .from('profiles')
      .select('id')
      .eq('telegram_id', user.id)
      .single();
    
    if (profile) {
      userHasProfile = true; // If a profile is found, set our flag to true.
    }
  }
}

// 4. Check if the current page path is one where we should hide the FABs.
const currentPath = Astro.url.pathname;
if (['/me', '/profile/edit', '/profile/projects'].includes(currentPath)) {
  shouldHideFab = true;
}
// --- END OF NEW SERVER-SIDE LOGIC ---
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="DivineX Mini App" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
		<title>{title}</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
	</head>
	<body>
    <NavBar />
		<main class="container">
      <slot /> 
    </main>
    
    <!-- !!! NEW: Simplified Conditional Rendering !!! -->
    <!-- We use the server-side variables to decide which button(s) to render. -->
    { !shouldHideFab && (
      <>
        { userHasProfile ? (
          <div class="fab-group" id="fab-group">
            <a href="/profile/projects" class="fab fab-secondary">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>
              <span>Manage Projects</span>
            </a>
            <a href="/profile/edit" class="fab fab-primary">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
              <span>Edit Profile</span>
            </a>
          </div>
        ) : (
          <a href="/me" class="fab" id="fab-create">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="17" y1="11" x2="23" y2="11"></line></svg>
            <span>Create Profile</span>
          </a>
        )}
      </>
    )}

    <script is:inline>
      // !!! NEW: The script is now MUCH simpler !!!
      // Its only job is to handle the initial theme.
      function setupTheme() {
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
          document.documentElement.classList.toggle('dark', savedTheme === 'dark');
        } else {
          try {
            const tg = window.Telegram.WebApp;
            const applyTelegramTheme = () => {
              document.documentElement.classList.toggle('dark', tg.colorScheme === 'dark');
            };
            tg.onEvent('themeChanged', applyTelegramTheme);
            applyTelegramTheme();
            tg.ready();
          } catch (e) {
            document.documentElement.className = 'light';
          }
        }
      }
      document.addEventListener('DOMContentLoaded', setupTheme);
    </script>
    <style is:global>
      .fab-group {
        position: fixed;
        bottom: 20px;
        right: 20px;
        display: flex; /* Now defaults to flex, no JS needed to show it */
        flex-direction: column;
        align-items: flex-end;
        gap: 1rem;
        z-index: 1000;
      }
      .fab {
        height: 56px;
        border-radius: 28px;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 20px;
        gap: 8px;
        font-size: 1rem;
        font-weight: 600;
        text-decoration: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: transform 0.2s;
        color: var(--button-text-color);
      }
      #fab-create {
        background-color: var(--accent-color);
      }
      .fab-primary {
        background-color: var(--accent-color);
      }
      .fab-secondary {
        background-color: var(--brand-color);
      }
      .fab:hover {
        transform: scale(1.05);
      }
    </style>
	</body>
</html>