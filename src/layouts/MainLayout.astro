---
import '../styles/global.css';
import NavBar from '../components/NavBar.astro';

interface Props { title: string; }
const { title } = Astro.props;
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="ProfileHub Mini App" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
		<title>{title}</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
	</head>
	<body>
    <NavBar />
		<main class="container">
      <slot /> 
    </main>
    
    <!-- !!! The Floating Action Buttons are back in their original position !!! -->
    <a href="/me" class="fab" id="fab-create" style="display: none;">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="17" y1="11" x2="23" y2="11"></line></svg>
      <span>Create Profile</span>
    </a>
    <a href="/profile/edit" class="fab" id="fab-edit" style="display: none;">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
      <span>Edit Profile</span>
    </a>

    <script is:inline>
      // This script now handles both initial theme and the smart button logic.
      async function checkProfileStatus(initData) {
        const fabCreate = document.getElementById('fab-create');
        const fabEdit = document.getElementById('fab-edit');
        if (!fabCreate || !fabEdit) return;
        try {
          const response = await fetch('/api/profiles/me', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ initData: initData }),
          });
          if (response.status === 404) {
            fabCreate.style.display = 'flex';
          } else if (response.status === 200) {
            fabEdit.style.display = 'flex';
          } else {
            fabCreate.style.display = 'flex';
          }
        } catch (error) {
          console.error('Failed to check profile status:', error);
          fabCreate.style.display = 'flex';
        }
      }

      function setupTelegramIntegration() {
        const fabCreate = document.getElementById('fab-create');
        const fabEdit = document.getElementById('fab-edit');

        // Logic to set the initial theme
        const savedTheme = localStorage.getItem('theme');
        if (!savedTheme) { // Only adapt to Telegram if no user preference is saved
          try {
            const tg = window.Telegram.WebApp;
            const applyTelegramTheme = () => {
              document.documentElement.classList.toggle('dark', tg.colorScheme === 'dark');
            };
            tg.onEvent('themeChanged', applyTelegramTheme);
            applyTelegramTheme();
          } catch (e) {
            document.documentElement.className = 'light';
          }
        }
        
        // Logic for the floating buttons
        try {
          const tg = window.Telegram.WebApp;
          tg.ready();
          
          const buttonColor = tg.themeParams.button_color || '#007aff';
          const textColor = tg.themeParams.button_text_color || '#ffffff';
          if (fabCreate) {
            fabCreate.style.backgroundColor = buttonColor;
            fabCreate.style.color = textColor;
          }
          if (fabEdit) {
            fabEdit.style.backgroundColor = buttonColor;
            fabEdit.style.color = textColor;
          }

          if (tg.initData) {
            checkProfileStatus(tg.initData);
          } else {
            if (fabCreate) fabCreate.style.display = 'flex';
          }
        } catch (e) {
          console.warn('Telegram script not found, showing default FAB.');
          if (fabCreate) fabCreate.style.display = 'flex';
        }
      }

      document.addEventListener('DOMContentLoaded', setupTelegramIntegration);
    </script>
    <style is:global>
      /* The styles for the Floating Action Button (FAB) */
      .fab {
        position: fixed; bottom: 20px; right: 20px; height: 56px;
        border-radius: 28px; display: none; align-items: center;
        justify-content: center; padding: 0 20px; gap: 8px;
        font-size: 1rem; font-weight: 600; text-decoration: none;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1000;
        background-color: #007aff; color: #ffffff;
        transition: background-color 0.2s, color 0.2s;
      }
    </style>
	</body>
</html>